!!!
%html
  %head
    %title #{@project.new? ? '新建项目' : '编辑项目'} - CICD工具
    %link(rel="stylesheet" href="/style.css")
  %body
    %header
      %h1 CICD自动化部署工具 - #{@project.new? ? '新建项目' : '编辑项目'}
      %a(href="/") 返回首页
    %main
      .project-form
        - if flash[:error]
          .flash.error= flash[:error]
        %form(action="#{@project.new? ? '/projects' : "/projects/#{@project.id}"}" method="post")
          %div.form-group
            %label 项目名称 *
            %input(type="text" name="name" value="#{@project.name}" required)
          %div.form-group
            %label 代码仓库类型 *
            %select(name="repo_type" required)
              %option(value="git" #{@project.repo_type == 'git' ? 'selected' : ''}) Git
              %option(value="svn" #{@project.repo_type == 'svn' ? 'selected' : ''}) SVN
          %div.form-group
            %label 代码仓库地址 *
            %input(type="text" name="repo_url" value="#{@project.repo_url}" required placeholder="https://github.com/user/repo.git 或 svn://example.com/repo")
          %div.form-group
            %label 分支/标签
            %input(type="text" name="branch" value="#{@project.branch || 'master'}" placeholder="默认为master")
          %div.form-group
            %label 构建脚本
            %textarea(name="build_script" rows="4" placeholder="npm install && npm run build")= @project.build_script
          %div.form-group
            %label 构建产物路径
            %input(type="text" name="artifact_path" value="#{@project.artifact_path}" placeholder="如：dist/app.tar.gz 或 build/output.jar")
          %div.form-group
            %label 部署服务器 *
            %input(type="text" name="deploy_server" value="#{@project.deploy_server}" required placeholder="格式：user@host:port，默认为root用户和22端口")
          %div.form-group
            %label 部署目录 *
            %input(type="text" name="deploy_path" value="#{@project.deploy_path}" required placeholder="如：/var/www/myapp")
          %div.form-group
            %label 启动方式
            %select(name="start_type" id="start_type")
              %option(value="script_path" #{@project.start_type == 'script_path' || @project.start_script && @project.start_script.end_with?('.sh') ? 'selected' : ''}) 根据目录填写启动脚本
              %option(value="custom_command" #{@project.start_type == 'custom_command' ? 'selected' : ''}) 自定义启动命令
          %div.form-group
            %label 启动脚本路径
            %input(type="text" name="start_script_path" id="start_script_path" value="#{@project.start_script && @project.start_script.end_with?('.sh') ? @project.start_script : ''}" placeholder="如：/var/www/myapp/start.sh")
          %div.form-group
            %label 自定义启动命令
            %textarea(name="custom_start_command" id="custom_start_command" rows="4" placeholder="如：systemctl restart myapp 或 nohup python app.py > /dev/null 2>&1 &")= @project.start_script && !@project.start_script.end_with?('.sh') && @project.start_type != 'script_path' ? @project.start_script : ''
          %div.form-group
            %label 启动模式
            %select(name="start_mode")
              %option(value="default" #{@project.start_mode == 'default' ? 'selected' : ''}) 默认执行
              %option(value="nohup" #{@project.start_mode == 'nohup' ? 'selected' : ''}) 使用nohup启动 (仅对脚本路径有效)
          %div.form-group
            %label 停止模式
            %select(name="stop_mode")
              %option(value="sh_script" #{@project.stop_mode == 'sh_script' ? 'selected' : ''}) 使用sh脚本关闭
              %option(value="kill_process" #{@project.stop_mode == 'kill_process' ? 'selected' : ''}) 根据PID直接kill -9
          %div.form-group
            %label Docker Compose文件路径
            %input(type="text" name="docker_compose_file" value="#{@project.docker_compose_file}" placeholder="如：docker-compose.yml")
          %div.form-group
            %label 备份目录
            %input(type="text" name="backup_path" value="#{@project.backup_path}" placeholder="如：/var/backups")
          %div.form-group
            %button(type="submit") #{@project.new? ? '创建' : '更新'}项目
            %a.button.secondary(href="/") 取消
    %footer
      %p CICD工具 &copy; #{Time.now.year}
    
    :javascript
      document.addEventListener('DOMContentLoaded', function() {
        const startTypeSelect = document.getElementById('start_type');
        const scriptPathGroup = document.querySelector('input[name="start_script_path"]').closest('.form-group');
        const customCommandGroup = document.querySelector('textarea[name="custom_start_command"]').closest('.form-group');
        const startModeGroup = document.querySelector('select[name="start_mode"]').closest('.form-group');
        
        // 根据选择的启动方式显示/隐藏相关输入框
        function toggleStartOptions() {
          const selectedType = startTypeSelect.value;
          
          if (selectedType === 'script_path') {
            scriptPathGroup.style.display = 'block';
            customCommandGroup.style.display = 'none';
            startModeGroup.style.display = 'block';
          } else if (selectedType === 'custom_command') {
            scriptPathGroup.style.display = 'none';
            customCommandGroup.style.display = 'block';
            startModeGroup.style.display = 'none';
          }
        }
        
        // 初始化显示状态
        toggleStartOptions();
        
        // 添加事件监听器
        startTypeSelect.addEventListener('change', toggleStartOptions);
      });