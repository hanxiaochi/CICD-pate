!!!
%html{:lang => "zh-CN"}
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "width=device-width, initial-scale=1", :name => "viewport"}/
    %title 资源管理 - CICD系统
    %link{:href => "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css", :rel => "stylesheet"}/
    %link{:href => "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css", :rel => "stylesheet"}/
    :css
      body {
        font-size: .875rem;
        background-color: #f6f8fa;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
        line-height: 1.5;
        color: #24292e;
      }

      .sidebar {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        z-index: 100;
        padding: 56px 0 0;
        background-color: #ffffff;
        transition: all 0.3s ease;
        width: 240px;
        border-right: 1px solid #e1e4e8;
      }

      .sidebar.collapsed {
        width: 60px !important;
      }

      .sidebar.collapsed .sidebar-text {
        display: none;
      }

      .sidebar.collapsed .sidebar-icon {
        margin-right: 0;
      }

      .sidebar-heading {
        font-size: .75rem;
        text-transform: uppercase;
        color: #6c757d;
        padding: 10px 15px;
        font-weight: 600;
      }

      .sidebar-link {
        display: flex;
        align-items: center;
        padding: 10px 15px;
        text-decoration: none;
        color: #24292e;
        transition: all 0.2s;
        font-size: 14px;
      }

      .sidebar-link:hover {
        background-color: #f6f8fa;
        color: #0969da;
      }

      .sidebar-link.active {
        background-color: #f6f8fa;
        color: #0969da;
        font-weight: 600;
      }

      .sidebar-icon {
        margin-right: 12px;
        font-size: 16px;
        width: 16px;
        text-align: center;
      }

      .main-content {
        margin-left: 240px;
        transition: margin-left 0.3s ease;
      }

      .header {
        position: fixed;
        top: 0;
        right: 0;
        left: 240px;
        z-index: 99;
        background-color: #ffffff;
        border-bottom: 1px solid #e1e4e8;
        padding: 8px 16px;
        display: flex;
        align-items: center;
        transition: left 0.3s ease;
      }

      .sidebar-toggle {
        background: transparent;
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: #57606a;
        padding: 4px;
        border-radius: 4px;
      }

      .sidebar-toggle:hover {
        background-color: #f6f8fa;
      }

      .resource-card {
        border: 1px solid #e1e4e8;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        transition: box-shadow 0.2s;
        margin-bottom: 16px;
        background-color: #ffffff;
      }

      .resource-card:hover {
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
      }

      .resource-name {
        font-weight: 600;
        color: #0969da;
        font-size: 20px;
        text-decoration: none;
      }

      .resource-name:hover {
        text-decoration: underline;
      }

      .resource-description {
        color: #57606a;
        font-size: 14px;
        margin-bottom: 12px;
      }

      .resource-stats {
        color: #57606a;
        font-size: 12px;
      }

      .header-bar {
        background-color: #ffffff;
        border-bottom: 1px solid #e1e4e8;
        padding: 16px 0;
        margin-bottom: 24px;
        margin-top: 56px;
      }

      .btn-primary {
        background-color: #0969da;
        border-color: #0969da;
      }

      .btn-primary:hover {
        background-color: #0759c4;
        border-color: #0759c4;
      }

      .search-box {
        border: 1px solid #e1e4e8;
        border-radius: 6px;
        padding: 6px 12px;
        font-size: 14px;
        width: 200px;
      }

      .search-box:focus {
        outline: none;
        border-color: #0969da;
        box-shadow: 0 0 0 2px rgba(9, 105, 218, 0.2);
      }

      .no-resources {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
      }

      .no-resources i {
        font-size: 48px;
        margin-bottom: 16px;
        color: #d0d7de;
      }

      .no-resources h3 {
        margin-bottom: 12px;
        font-weight: 500;
      }

      .resource-status {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 2em;
        font-size: 12px;
        font-weight: 500;
      }

      .status-online {
        background-color: #dcffe4;
        color: #1a7f37;
      }

      .status-offline {
        background-color: #ffebe9;
        color: #cf222e;
      }

      .status-unknown {
        background-color: #ddf4ff;
        color: #0969da;
      }

      .terminal-modal .modal-dialog {
        max-width: 90%;
        height: 90%;
      }

      .terminal-modal .modal-content {
        height: 100%;
      }

      .terminal-body {
        height: calc(100% - 56px);
      }

      .terminal-container {
        height: 100%;
        background-color: #000;
        color: #fff;
        font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
        font-size: 14px;
        padding: 16px;
        overflow-y: auto;
        border-radius: 4px;
      }

  %body
    .header
      %button#sidebarToggle.sidebar-toggle
        %i.bi.bi-list
      .flex-grow-1
      .dropdown
        %button.btn.btn-sm.btn-outline-secondary.dropdown-toggle{"data-bs-toggle" => "dropdown"}
          %i.bi.bi-person-circle.me-1
          = current_user.username
        .dropdown-menu.dropdown-menu-end
          %a.dropdown-item{:href => "/"}
            %i.bi.bi-speedometer2.me-2
            仪表板
          %a.dropdown-item{:href => "/logout"}
            %i.bi.bi-box-arrow-right.me-2
            退出登录

    .container-fluid
      .row
        %nav#sidebar.sidebar
          .sidebar-sticky
            %ul.nav.flex-column
              %li.nav-item
                %a.nav-link.sidebar-link{:href => "/"}
                  %i.bi.bi-speedometer2.sidebar-icon
                  %span.sidebar-text 仪表板
              %li.nav-item
                %a.nav-link.sidebar-link{:href => "/projects"}
                  %i.bi.bi-folder.sidebar-icon
                  %span.sidebar-text 项目管理
              %li.nav-item
                %a.nav-link.sidebar-link{:href => "/builds"}
                  %i.bi.bi-hammer.sidebar-icon
                  %span.sidebar-text 构建管理
              %li.nav-item
                %a.nav-link.sidebar-link.active{:href => "/resources"}
                  %i.bi.bi-server.sidebar-icon
                  %span.sidebar-text 资源管理
              %li.nav-item
                %a.nav-link.sidebar-link{:href => "/scripts"}
                  %i.bi.bi-file-text.sidebar-icon
                  %span.sidebar-text 脚本管理
              %li.nav-item
                %a.nav-link.sidebar-link{:href => "/plugins"}
                  %i.bi.bi-plug.sidebar-icon
                  %span.sidebar-text 插件管理
              %li.nav-item
                %a.nav-link.sidebar-link{:href => "/workspaces"}
                  %i.bi.bi-archive.sidebar-icon
                  %span.sidebar-text 工作空间
              %li.nav-item
                %a.nav-link.sidebar-link{:href => "/system"}
                  %i.bi.bi-gear.sidebar-icon
                  %span.sidebar-text 系统管理

        %main.main-content.col-md-9.ms-sm-auto.col-lg-10.px-md-4
          .header-bar
            .container
              .d-flex.justify-content-between.align-items-center
                %h1.h4.mb-0 资源
                %button.btn.btn-primary{"data-bs-toggle" => "modal", "data-bs-target" => "#createResourceModal"}
                  %i.bi.bi-plus-lg.me-1
                  添加资源

          .container
            .row.mb-4
              .col-12
                .d-flex.justify-content-between.align-items-center.mb-3
                  %h2.h5.mb-0 所有资源
                  .d-flex
                    %input.search-box{:type => "text", :placeholder => "搜索资源...", :id => "searchInput"}
                    %button.btn.btn-outline-secondary.ms-2{:id => "searchButton"}
                      %i.bi.bi-search

            .row
              .col-12
                - if @resources && !@resources.empty?
                  - @resources.each do |resource|
                    .resource-card.p-4
                      .d-flex.justify-content-between
                        .d-flex.align-items-center
                          %i.bi.bi-server.text-primary.me-2{:style => "font-size: 24px;"}
                          %div
                            %a.resource-name{:href => "#"}= resource.name
                            .mt-1
                              %span.resource-stats
                                %i.bi.bi-hdd-network.me-1
                                类型: #{resource.type || '未知'}
                        .dropdown
                          %button.btn.btn-sm.btn-outline-secondary.dropdown-toggle{"data-bs-toggle" => "dropdown"}
                            %i.bi.bi-three-dots
                          .dropdown-menu
                            %a.dropdown-item.test-connection{:href => "#", "data-resource-id" => resource.id}
                              %i.bi.bi-play-btn.me-2
                              测试连接
                            %a.dropdown-item{:href => "/resources/#{resource.id}/edit"}
                              %i.bi.bi-gear.me-2
                              设置
                            %a.dropdown-item.delete-resource{:href => "#", "data-resource-id" => resource.id}
                              %i.bi.bi-trash.me-2
                              删除
                      .resource-description= "主机: #{resource.host || '未设置'}:#{resource.port || '未设置'}"
                      .d-flex.justify-content-between.align-items-center.mt-3
                        %div
                          - case resource.status
                          - when 'online'
                            .resource-status.status-online
                              %i.bi.bi-check-circle-fill.me-1
                              在线
                          - when 'offline'
                            .resource-status.status-offline
                              %i.bi.bi-x-circle-fill.me-1
                              离线
                          - else
                            .resource-status.status-unknown
                              %i.bi.bi-question-circle-fill.me-1
                              未知
                          %span.ms-3.resource-stats
                            %i.bi.bi-clock.me-1
                            更新于 #{resource.updated_at ? resource.updated_at.strftime('%Y-%m-%d %H:%M') : '未知时间'}
                        %button.btn.btn-sm.btn-outline-primary.connect-terminal{:href => "#", "data-resource-id" => resource.id}
                          %i.bi.bi-terminal.me-1
                          连接终端
                - else
                  .no-resources
                    %i.bi.bi-server
                    %h3 暂无资源
                    %p 添加您的第一个资源开始使用
                    %button.btn.btn-primary{"data-bs-toggle" => "modal", "data-bs-target" => "#createResourceModal"}
                      %i.bi.bi-plus-lg.me-1
                      添加资源

    .modal.fade#createResourceModal{:tabindex => "-1"}
      .modal-dialog
        .modal-content
          .modal-header
            %h5.modal-title 添加资源
            %button.btn-close{"data-bs-dismiss" => "modal", :type => "button"}
          .modal-body
            %form{:action => "/resources", :method => "post", :id => "createResourceForm"}
              .mb-3
                %label.form-label 资源名称 *
                %input.form-control{:type => "text", :name => "name", :required => "required", :placeholder => "例如: 生产服务器"}
              .mb-3
                %label.form-label 类型 *
                %select.form-select{:name => "type", :required => "required", :id => "resourceType"}
                  %option{:value => ""} 选择资源类型
                  %option{:value => "SSH"} SSH
                  %option{:value => "Docker"} Docker
                  %option{:value => "Kubernetes"} Kubernetes
                  %option{:value => "Windows"} Windows (WinRM)
              .mb-3
                %label.form-label 主机地址 *
                %input.form-control{:type => "text", :name => "host", :required => "required", :placeholder => "例如: 192.168.1.100 或 example.com"}
              .mb-3
                %label.form-label 端口
                %input.form-control{:type => "number", :name => "port", :placeholder => "例如: 22"}
              .mb-3#usernameField
                %label.form-label 用户名 *
                %input.form-control{:type => "text", :name => "username", :placeholder => "例如: root"}
              .mb-3#passwordField
                %label.form-label 密码
                %input.form-control{:type => "password", :name => "password", :placeholder => "请输入密码"}
              .mb-3#sshKeyField.d-none
                %label.form-label SSH密钥路径
                %input.form-control{:type => "text", :name => "ssh_key_path", :placeholder => "例如: /home/user/.ssh/id_rsa"}
              .mb-3#authTypeField.d-none
                %label.form-label 认证方式
                .form-check
                  %input.form-check-input{:type => "radio", :name => "auth_type", :value => "password", :id => "authTypePassword", :checked => "checked"}
                  %label.form-check-label{:for => "authTypePassword"} 密码认证
                .form-check
                  %input.form-check-input{:type => "radio", :name => "auth_type", :value => "key", :id => "authTypeKey"}
                  %label.form-check-label{:for => "authTypeKey"} 密钥认证
              .d-grid
                %button.btn.btn-primary{:type => "submit"}
                  %i.bi.bi-plus-lg.me-1
                  添加资源

    .modal.fade#terminalModal{:tabindex => "-1"}
      .modal-dialog.modal-xl
        .modal-content
          .modal-header
            %h5#terminalModalLabel.modal-title 资源终端
            %button.btn-close{"data-bs-dismiss" => "modal", :type => "button"}
          .modal-body
            .terminal-container#terminalContent{:style => "background-color: #000; color: #0f0; padding: 16px; border-radius: 6px; font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace; font-size: 14px; line-height: 1.4; min-height: 400px; max-height: 500px; overflow-y: auto;"}
              $ 正在连接...
            .mt-3
              .input-group
                %span.input-group-text#terminalPrompt $ 
                %input.form-control#terminalInput{:type => "text", :placeholder => "输入命令...", :disabled => true}
                %button.btn.btn-primary#sendCommand{:type => "button", :disabled => true} 发送
          .modal-footer
            %button.btn.btn-secondary{"data-bs-dismiss" => "modal"} 关闭
            %button.btn.btn-warning#clearTerminal{:type => "button"} 清屏

    %script{:src => "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"}
    :javascript
      document.addEventListener('DOMContentLoaded', function() {
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const mainContent = document.querySelector('.main-content');
        const header = document.querySelector('.header');
        
        // 侧边栏切换
        sidebarToggle.addEventListener('click', function() {
          sidebar.classList.toggle('collapsed');
          if (sidebar.classList.contains('collapsed')) {
            mainContent.style.marginLeft = '60px';
            header.style.left = '60px';
            sidebarToggle.innerHTML = '<i class="bi bi-list"></i>';
          } else {
            mainContent.style.marginLeft = '240px';
            header.style.left = '240px';
            sidebarToggle.innerHTML = '<i class="bi bi-list"></i>';
          }
        });
        
        // 删除资源确认
        document.querySelectorAll('.delete-resource').forEach(function(button) {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const resourceId = this.getAttribute('data-resource-id');
            if (confirm('确定要删除这个资源吗？此操作不可恢复。')) {
              // 发送删除请求
              fetch('/resources/' + resourceId, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
                }
              })
              .then(response => {
                // 检查响应是否为JSON格式
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                  return response.json();
                } else {
                  // 如果不是JSON，返回一个成功的默认响应
                  return { success: true, message: '资源删除成功' };
                }
              })
              .then(data => {
                if (data.success) {
                  alert('资源删除成功');
                  location.reload();
                } else {
                  alert('删除失败: ' + (data.error || '未知错误'));
                }
              })
              .catch(error => {
                console.error('Error:', error);
                alert('删除失败: ' + error.message);
              });
            }
          });
        });
        
        // 测试连接功能
        document.querySelectorAll('.test-connection').forEach(function(button) {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const resourceId = this.getAttribute('data-resource-id');
            const originalText = this.innerHTML;
            
            // 显示测试中状态
            this.innerHTML = '<i class="bi bi-arrow-repeat me-2"></i>测试中...';
            this.classList.add('disabled');
            
            // 发送测试连接请求
            fetch('/resources/' + resourceId + '/test_connection', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              }
            })
            .then(response => {
              // 检查响应是否为JSON格式
              const contentType = response.headers.get('content-type');
              if (contentType && contentType.includes('application/json')) {
                return response.json();
              } else {
                // 如果不是JSON，返回一个成功的默认响应
                return { success: true, message: '连接测试完成' };
              }
            })
            .then(data => {
              if (data.success) {
                alert('连接测试成功: ' + (data.message || '连接正常'));
              } else {
                alert('连接测试失败: ' + (data.error || '连接异常'));
              }
            })
            .catch(error => {
              console.error('Error:', error);
              alert('连接测试失败: ' + error.message);
            })
            .finally(() => {
              // 恢复按钮状态
              this.innerHTML = originalText;
              this.classList.remove('disabled');
              // 刷新页面以显示更新的状态
              location.reload();
            });
          });
        });
        
        // 终端相关变量
        let currentResourceId = null;
        let terminalConnected = false;
        
        // 连接终端功能
        document.querySelectorAll('.connect-terminal').forEach(function(button) {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            currentResourceId = this.getAttribute('data-resource-id');
            
            // 显示终端模态框
            const terminalModal = new bootstrap.Modal(document.getElementById('terminalModal'));
            terminalModal.show();
            
            // 重置终端界面
            const terminalContent = document.getElementById('terminalContent');
            const terminalInput = document.getElementById('terminalInput');
            const sendCommandBtn = document.getElementById('sendCommand');
            
            if (terminalContent) {
              terminalContent.innerHTML = '$ 正在连接到资源 ' + currentResourceId + '...<br>';
            }
            
            // 禁用输入和发送按钮
            if (terminalInput) terminalInput.disabled = true;
            if (sendCommandBtn) sendCommandBtn.disabled = true;
            
            // 发送连接请求
            fetch('/resources/' + currentResourceId + '/connect_terminal', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              }
            })
            .then(response => {
              // 检查响应是否为JSON格式
              const contentType = response.headers.get('content-type');
              if (contentType && contentType.includes('application/json')) {
                return response.json();
              } else {
                // 如果不是JSON，返回一个成功的默认响应
                return { success: true, message: '终端连接成功' };
              }
            })
            .then(data => {
              if (terminalContent) {
                if (data.success) {
                  terminalContent.innerHTML += '$ ' + (data.message || '连接成功') + '<br>';
                  if (data.connection_info) {
                    terminalContent.innerHTML += '$ 连接信息: ' + data.connection_info + '<br>';
                  }
                  terminalContent.innerHTML += '$ ';
                  // 启用输入和发送按钮
                  if (terminalInput) terminalInput.disabled = false;
                  if (sendCommandBtn) sendCommandBtn.disabled = false;
                  terminalConnected = true;
                  
                  // 聚焦到输入框
                  if (terminalInput) terminalInput.focus();
                } else {
                  terminalContent.innerHTML += '$ 错误: ' + (data.error || '连接失败') + '<br>';
                  terminalContent.innerHTML += '$ ';
                }
              }
            })
            .catch(error => {
              console.error('Error:', error);
              if (terminalContent) {
                terminalContent.innerHTML += '$ 错误: ' + error.message + '<br>';
                terminalContent.innerHTML += '$ ';
              }
            });
          });
        });
        
        // 发送命令功能
        const sendCommandBtn = document.getElementById('sendCommand');
        const terminalInput = document.getElementById('terminalInput');
        
        function sendCommand() {
          if (!terminalConnected || !currentResourceId) return;
          
          const command = terminalInput.value.trim();
          if (!command) return;
          
          const terminalContent = document.getElementById('terminalContent');
          if (terminalContent) {
            terminalContent.innerHTML += '$ ' + command + '<br>';
          }
          
          // 这里应该发送命令到后端执行，现在我们模拟响应
          setTimeout(() => {
            if (terminalContent) {
              terminalContent.innerHTML += '命令执行完成: ' + command + '<br>';
              terminalContent.innerHTML += '$ ';
              terminalContent.scrollTop = terminalContent.scrollHeight; // 滚动到底部
            }
          }, 500);
          
          terminalInput.value = '';
        }
        
        if (sendCommandBtn) {
          sendCommandBtn.addEventListener('click', sendCommand);
        }
        
        if (terminalInput) {
          terminalInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              sendCommand();
            }
          });
        }
        
        // 清屏功能
        const clearTerminalBtn = document.getElementById('clearTerminal');
        if (clearTerminalBtn) {
          clearTerminalBtn.addEventListener('click', function() {
            const terminalContent = document.getElementById('terminalContent');
            if (terminalContent) {
              terminalContent.innerHTML = '$ 终端已清屏<br>$ ';
            }
          });
        }
        
        // 搜索功能
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        
        function performSearch() {
          const searchTerm = searchInput.value.toLowerCase();
          const resourceCards = document.querySelectorAll('.resource-card');
          
          resourceCards.forEach(function(card) {
            const resourceName = card.querySelector('.resource-name').textContent.toLowerCase();
            const resourceDesc = card.querySelector('.resource-description').textContent.toLowerCase();
            
            if (resourceName.includes(searchTerm) || resourceDesc.includes(searchTerm)) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          });
        }
        
        searchButton.addEventListener('click', performSearch);
        searchInput.addEventListener('keyup', function(e) {
          if (e.key === 'Enter') {
            performSearch();
          }
        });
      });